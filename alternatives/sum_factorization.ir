func @sum_factorization(%basis0: memref<f32x3x4>,
                        %basis1: memref<f32x3x4>,
                        %basis2: memref<f32x3x4>,
                        %JxW:    memref<f32x4x4x4x?>,
                        %in:     memref<f32x3x3x3x?>,
                        %out:    memref<f32x3x3x3x?>) {
                        
    %gid = group_id.x : index                               ; Get our index e
    %wsp0 = alloca : memref<f32x3x3x3,local>; // Reserve temporary memory
    %wsp1 = alloca : memref<f32x3x3x4,local>; // Reserve temporary memory
    %wsp2 = alloca : memref<f32x3x4x4,local>; // Reserve temporary memory
    %wsp3 = alloca : memref<f32x4x4x4,local>; // Reserve temporary memory

    %J_e = subview %JxW[0:4,0:4,0:4,%gid] : memref<f32x4x4x4>;
    %in_e = subview %in[0:3,0:3,0:3,%gid] : memref<f32x3x3x3>;
    %out_e = subview %out[0:3,0:3,0:3,%gid] : memref<f32x3x3x3>;

    %c0 = constant 1.0 : f32
    %c1 = constant 0.0 : f32

; Direction 0

    %tmp1 = fuse %in_e[0,1] : memref<f32x9x3>
    %res1 = fuse %wsp1[0,1] : memref<f32x9x4,local>    
    gemm.n.n %c1, %tmp1, %basis0, %c0, %res1
    
: Direction 1

    %dir1_from = constant 0 : index
    %dir2_to   = constant 4 : index  
    for %p = %dir1_from, %dir2_to { ; Batch of GEMMs
        %tmp = subview %wsp1[0:3,0:3,%p] : memref<f32x3x3,local>
        %res = subview %wsp2[0:3,%p,0:4] : memref<f32x3x4,strided<1,12>,local>
        gemm.n.n %c1, %tmp, %basis1, %c0, %res
    }

; Direction 2 

    %tmp4 = fuse %wsp2[1,2] : memref<f32x3x16,local>
    %res4 = fuse %wsp3[1,2] : memref<f32x4x16,local>
    gemm.t.n %c1, %basis2, %tmp4, %c0, %res4

; Multiply with weights and determinant of Jacobi

    %flat1 = fuse %J_e[0,2] : memref<f32x64>
    %flat2 = fuse %wsp3[0,2] : memref<f32x64,local>
    hadamard %c1, %flat1, %flat2, %c0, %flat2

; Direction 2 (reverse)

    %tmp6 = fuse %wsp3[1,2] : memref<f32x4x16,local>
    %res6 = fuse %wsp2[1,2] : memref<f32x3x16,local>
    gemm.n.n %c1, %basis2, %tmp6, %c0, %res6

; Direction 1 (reverse)

    %dir1r_from = constant 0 : index
    %dir1r_to   = constant 4 : index
    for %p7 = %dir1r_from, %dir1r_to {
        %tmp = subview %wsp2[0:3,%p7,0:4] : memref<f32x3x4,strided<1,12>,local>
        %res = subview %wsp1[0:3,0:3,%p7] : memref<f32x3x3,local>
        
        gemm.n.t %c1, %tmp, %basis1, %c0, %res
    }

: Direction 0 (reverse)

    %dir0r_from = constant 0 : index
    %dir0r_to   = constant 3 : index
    for %j8 = %dir0r_from, %dir0r_to {
        %tmp = subview %wsp1[0:3,%j8,0:4] : memref<f32x3x4,strided<1,9>,local>
        %res = subview %out_e[0:3,%j8,0:3] : memref<f32x3x3,strided<1,9>>
        gemm.n.t %c1, %tmp, %basis0, %c1, %res
    }
    
}

