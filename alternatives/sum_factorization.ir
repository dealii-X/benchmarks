func @sum_factorization(%basis0: memref<f32x3x4>,
                        %basis1: memref<f32x3x4>,
                        %basis2: memref<f32x3x4>,
                        %JxW:    memref<f32x4x4x4x?>,
                        %in:     memref<f32x3x3x3x?>,
                        %out:    memref<f32x3x3x3x?>) 
{
    %gid = group_id                                ; Get our index e

    %wsp0 = alloca -> memref<f32x3x3x3>; // Reserve temporary memory
    %wsp1 = alloca -> memref<f32x3x3x4>; // Reserve temporary memory
    %wsp2 = alloca -> memref<f32x3x4x4>; // Reserve temporary memory
    %wsp3 = alloca -> memref<f32x4x4x4>; // Reserve temporary memory
;    %wsp4 = alloca -> memref<f32x4x4x4>;

    %J_e = subview %JxW[:,:,:,%gid] : memref<f32x4x4x4x?>;
    %in_e = subview %in[:,:,:,%gid] : memref<f32x3x3x3x?>;
    %out_e = subview %out[:,:,:,%gid] : memref<f32x3x3x3x?>;

;    for %j = 0, 3 { ; Batch of GEMMs
;
;        %tmp = subview %in_e[:,%j,:] : memref<f32x3x3x3>
;        %res = subview %wsp1[:,%j,:] : memref<f32x3x3x4>
;
;        gemm.n.n 1.0, %tmp, %basis0, 0.0, %res :
;            f32, memref<f32x3x3,strided<1,9>>, memref<f32x3x4>, f32, memref<f32x3x4,strided<1,9>>;
;    }

    %tmp1 = fuse %in_e[0,1] : memref<f32x3x3x3>
    %res1 = fuse %wsp1[0,1] : memref<f32x3x3x4>
    gemm.n.n 1.0, %tmp1, %basis0, 0.0, %res1 :
        f32, memref<f32x9x3>, memref<f32x3x4>, f32, memref<f32x9x4>

    
    for %p = 0, 4 { ; Batch of GEMMs
        %tmp = subview %wsp1[:,:,%p] : memref<f32x3x3x4>
        %res = subview %wsp2[:,%p,:] : memref<f32x3x4x4>

        gemm.n.n 1.0, %tmp, %basis1, 0.0, %res :
            f32, memref<f32x3x3>, memref<f32x3x4>, f32, memref<f32x3x4,strided<1,12>>
    }

;    for %q_ = 0, 4 { ; Batch of GEMV
;        for %p_ = 0, 4 {
;        
;            %tmp = subview %wsp2[:,%p_,%q_] : memref<f32x3x4x4>
;            %res = subview %wsp3[:,%q_,%p_] : memref<f32x4x4x4>
;
;            gemv.t 1.0, %basis2, %tmp, 0.0, %res :
;                f32, memref<f32x3x4>, memref<f32x3>, f32, memref<f32x4> 
;        }
;    }    

    %tmp4 = fuse %wsp2[1,2] : memref<f32x3x4x4>
    %res4 = fuse %wsp3[1,2] : memref<f32x4x4x4>

    gemm.t.n 1.0, %basis2, %tmp4, 0.0, %res4 :
        f32, memref<f32x3x4>, memref<f32x3x16>, f32, memref<f32x4x16>


    %flat1 = fuse %J_e[0,2] : memref<f32x4x4x4>
    %flat2 = fuse %wsp3[0,2] : memref<f32x4x4x4>
;    %flat3 = fuse %wsp4[0,2] : memref<f32x4x4x4> ;  This one is probably redundant...

    hadamard 1.0, %flat1, %flat2, 0.0, %flat2 :
        f32, memref<f32x64>, memref<f32x64>, f32, memref<f32x64>


;    for %q6 = 0, 4 {                               ; Step 6
;        for %p6 = 0, 4 {            
;            %tmp = subview %wsp3[:,%q6,%p6] : memref<f32x4x4x4>
;            %res = subview %wsp2[:,%p6,%q6] : memref<f32x3x4x4>
;            gemv.n 1.0, %basis2, %tmp, 0.0, %res :
;                f32, memref<f32x3x4>, memref<f32x4>, f32, memref<f32x3> 
;        }
;    }

    %tmp6 = fuse %wsp3[1,2] : memref<f32x4x4x4>
    %res6 = fuse %wsp2[1,2] : memref<f32x3x4x4>
    gemm.n.n 1.0, %basis2, %tmp6, 0.0, %res6 :
        f32, memref<f32x3x4>, memref<f32x4x16>, f32, memref<f32x3x16>


    for %p7 = 0, 4 {
        %tmp = subview %wsp2[:,%p7,:] : memref<f32x3x4x4>
        %res = subview %wsp1[:,:,%p7] : memref<f32x3x3x4>
        
        gemm.n.t 1.0, %tmp, %basis1, 0.0, %res :
            f32, memref<f32x3x4,strided<1,12>>,memref<f32x3x4>, f32, memref<f32x3x3>
    }

    for %j8 = 0, 3 {
        %tmp = subview %wsp1[:,%j8,:] : memref<f32x3x3x4>
        %res = subview %out_e[:,%j8,:] : memref<f32x3x3x3>
        gemm.n.t 1.0, %tmp, %basis0, 0.0, %res :
            f32, memref<f32x3x4,strided<1,9>>, memref<f32x3x4>, f32, memref<f32x3x3,strided<1,9>>
    }
    
}

